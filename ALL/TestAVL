#include <iostream>
#include <chrono>
#include <typeinfo>
#include <cmath>
#include <cstdlib>
#include <fstream>

#include "FOREST_GUMP.cpp"

double get_time()
{
    return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::steady_clock::now().time_since_epoch()).count()/1e6;
}

int main ()
{
    using namespace std;
    setlocale(LC_ALL, "RUSSIAN");

//-----------------------��� ������



    double a, b;
    double tmp_1 = 0;
    int rep_1 = 1 * 1000 * 1000;
    int factor =  1;
    int rep_2 = 10;
    int N = 0;
    double start = 0, finish = 0, total = 0;
    int n = 0;
    double averageX = 0, averageY = 0, averageXY = 0, averageX2 = 0;
    bool flag;

//-----------------------�������� insert
    AVL<int,int> *test = new AVL<int,int>;
    flag = true;
    int quantity_insert = 0;
    for (int i = 0; i < 10; i++){

        for ( int i = quantity_insert; i < 10 + quantity_insert; i++){
            test->insert({i,i});
        }
        quantity_insert += 10;
        if ( quantity_insert != test->size()) flag = false;

    }
    for (int i = 0; i < 10; i++){
        test->insert({i,i});
    }
    if ( quantity_insert != test->size()) flag = false;
    if (!flag) cout << "������ ������� ��������" << endl;
    else cout << "���� �� ������� �������" << endl;

//-----------------------�������� find

    test = new AVL<int,int>;
    flag = true;

    int quantity = 1000;
    int test_find[quantity];
    for (int i = 0; i < quantity; i++){
        int b = rand();
        test_find[i] = b;
        test->insert({b,i});
    }

    for (int i = quantity; i < 0; i--){
        if ( !test -> find( test_find[i]) ) flag = false;
    }
    if (!flag) cout << "������ ������ ��������" << endl;
    else cout << "���� �� ����� �������" << endl;


//----------------------�������� remove

    flag = true;
    for (int j = 0; j < 1; j++){
        test = new AVL<int,int>;
        for (int i = 0; i < 20; i++){
            test->insert({i,i});
        }
        for ( int i = 0; i < 30; i++){
            test->remove(i);
        }
        if ( test->size() != 0) flag = false;
    }
    if (!flag) cout << "������ �������� ��������" << endl;
    else cout << "���� �� �������� �������" << endl;




/*
//-----------------------remove

    // ����� �������� �������� ���� ������� [0, rep_2] * k ���������
    ofstream AVLremove("AVLremove.txt");
    averageX = 0, averageY = 0, averageXY = 0, averageX2 = 0;
    for (int k = 1; k <= 1000 * 1000; k *= 10)
    {
        factor =  k;
        N = 0;
        test_struct = {};

        // �������� rep_2 ����� � ���� ����������
        for (int j = 0; j < rep_2; ++j)
        {

            // ����������� ������� ���������
            for (int i = (factor + rep_1) * j;
                 i < factor * (j+1) + rep_1 * j;
                 ++i)
            {
                test_struct.insert({i,i});
            }

            // ����� rep_1 ��������� �������� � �������� ����� ������.
            start = get_time();
            for (int i = factor * (j+1) + rep_1 * j;
                i < (factor + rep_1) * (j + 1); ++i)
            {
                // ��� ��� ������������:

                // -----------------------
                // test_struct.insert(i);
                // test_struct.find(100);
                test_struct.remove(i);
                // -----------------------
            }
            finish = get_time();
            total = finish - start;
            N += factor;
            n++;
            AVLremove << N << " " << total << endl;
            averageY = ( total + averageY*n )/n;
            averageX = ( N*log(N) + averageX*n )/n;
            averageX2 = ( (N*log(N))*(N*log(N)) + averageX2*n )/n;
            averageXY = ( (N*log(N))*total + averageXY*n )/n;
        }
    }
    a = ( averageXY - averageX*averageY) / ( averageX2 - averageX*averageX);
    b = averageY - a*averageX;
    cout << "remove:" << endl;
    cout << a << "xlnx+" << b << endl;
    AVLremove.close();


//---------------------------find

    ofstream AVLfind("AVLfind.txt");
    averageX = 0, averageY = 0, averageXY = 0, averageX2 = 0;
    for (int k = 1; k <= 1000 * 1000; k *= 10)
    {
        factor =  k;
        N = 0;
        test_struct = {};


        // �������� rep_2 ����� � ���� ����������
        for (int j = 0; j < rep_2; ++j)
        {

            // ����������� ������� ���������
            for (int i = (factor + rep_1) * j;
                 i < factor * (j+1) + rep_1 * j;
                 ++i)
            {
                test_struct.insert({i,i});
            }

            // ����� rep_1 ��������� �������� � �������� ����� ������.
            start = get_time();
            for (int i = factor * (j+1) + rep_1 * j;
                i < (factor + rep_1) * (j + 1); ++i)
            {
                // ��� ��� ������������:

                // -----------------------
                // test_struct.insert(i);
                test_struct.find(100);
                //test_struct.remove(i);
                // -----------------------
            }
            finish = get_time();
            total = finish - start;
            N += factor;
            n++;
            AVLfind << N << " " << total << endl;
            averageY = ( total + averageY*n )/n;
            averageX = ( N*log(N) + averageX*n )/n;
            averageX2 = ( (N*log(N))*(N*log(N)) + averageX2*n )/n;
            averageXY = ( (N*log(N))*total + averageXY*n )/n;
        }
    }

    a = ( averageXY - averageX*averageY) / ( averageX2 - averageX*averageX);
    b = averageY - a*averageX;
    cout << "find:" << endl;
    cout << a << "xlnx+" << b <<endl;
    AVLfind.close();
*/
//-------------------------------------insert


    ofstream AVLinsert("AVLinsert.txt");

    averageX = 0, averageY = 0, averageXY = 0, averageX2 = 0;
    for (int k = 1; k <= 1000 * 100; k *= 10)
    {

        factor =  k;
        N = 0;
        AVL<int,int> test_struct = {};


        // �������� rep_2 ����� � ���� ����������
        for (int j = 0; j < rep_2; ++j)
        {

            // ����� rep_1 ��������� �������� � �������� ����� ������.
            start = get_time();
            for (int i = factor * (j+1) + rep_1 * j;
                i < (factor + rep_1) * (j + 1); ++i)
            {
                // ��� ��� ������������:

                // -----------------------
                test_struct.insert({i,i});
                // test_struct.find(100);
                //test_struct.remove(i);
                // -----------------------
            }
            finish = get_time();
            total = finish - start;
            N += factor;
            n++;
            AVLinsert << N << " " << total << endl;
            averageY = ( total + averageY*n )/n;
            averageX = ( N*log(N) + averageX*n )/n;
            averageX2 = ( (N*log(N))*(N*log(N)) + averageX2*n )/n;
            averageXY = ( (N*log(N))*total + averageXY*n )/n;
        }
    }
    a = ( averageXY - averageX*averageY) / ( averageX2 - averageX*averageX);
    b = averageY - a*averageX;
    cout << "insert:" << endl;
    cout << a << "xlnx+" << b << endl ;
    AVLinsert.close();


}




